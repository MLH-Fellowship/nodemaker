import { join } from "path";
import NodeFilesGenerator from "../generators/NodeFilesGenerator";
import { NodeGenerationType, AuthType } from "../utils/enums";
import { mainParameters, metaParameters } from "../parameters";
import Prompter from "../services/Prompter";
import readdir from "../utils/readdir";

export const generateNodeFiles = async (
  paramsBundle: ParamsBundle
): Promise<NodemakerResult> => {
  const generator = new NodeFilesGenerator(paramsBundle);
  generator.generateMainNodeFile();
  generator.generateGenericFunctionsFile();

  if (paramsBundle.nodeGenerationType === NodeGenerationType.Complex)
    generator.generateResourceDescriptionFile();

  if (paramsBundle.metaParameters.authType !== AuthType.None)
    generator.generateCredentialsFile();

  try {
    await verifyGeneratedFiles(paramsBundle);
    return { error: false };
  } catch (thrownError) {
    return { error: true, errorMessage: thrownError };
  }
};

/**Verify if the 2 to 4 files that are to be generated by from `generateNodeFiles` were actually generated.*/
const verifyGeneratedFiles = async (paramsBundle: ParamsBundle) => {
  const files = await readdir(join("output"));

  const wasGenerated = (snippet: string) =>
    files.some((file) => file.endsWith(snippet));

  const filesToBeVerified = [".node.ts", "GenericFunctions.ts"];

  if (paramsBundle.nodeGenerationType === NodeGenerationType.Complex)
    filesToBeVerified.push("Description.ts");

  if (paramsBundle.metaParameters.authType === AuthType.OAuth2)
    filesToBeVerified.push("OAuth2Api.credentials.ts");

  filesToBeVerified.forEach((file) => {
    if (!wasGenerated(file)) {
      throw Error("Generation failed for file: " + file);
    }
  });
};

// used by CLI
// (async () => {
//   const { nodeGenerationType } = await Prompter.forNodeGeneration();
//   const result = await generateNodeFiles({
//     mainParameters,
//     metaParameters,
//     nodeGenerationType,
//   });
//   console.log(result);
// })();
